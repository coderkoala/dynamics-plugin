using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Crm.Services.Utility;
using Microsoft.Xrm.Sdk.Metadata;


namespace Kipon.Solid.SvcFilter
{
    public class CustomizeCodeDomService : ICustomizeCodeDomService
    {
        #region static code to be generated
        private const string CRM_UNIT_OF_WORK_GENERIC = @"        public void Dispose()
        {
            context.Dispose();
        }

        public R ExecuteRequest<R>(OrganizationRequest request) where R : OrganizationResponse
        {
            return (R)this.context.Execute(request);
        }

        public OrganizationResponse Execute(OrganizationRequest request)
        {
            return this.context.Execute(request);
        }


        public Guid Create(Entity entity)
        {
            return this._service.Create(entity);
        }

        public void Update(Entity entity)
        {
            this._service.Update(entity);
        }

        public void Delete(Entity entity)
        {
            this._service.Delete(entity.LogicalName, entity.Id);
        }
        public void ClearChanges()
        {
            this.context.ClearChanges();
        }

        public void Detach(string logicalName, Guid? id)
        {
            if (this.context != null)
            {
                var candidates = (from c in this.context.GetAttachedEntities() where c.LogicalName == logicalName select c);
                if (id != null)
                {
                    candidates = (from c in candidates where c.Id == id.Value select c);
                }
                foreach (var r in candidates.ToArray())
                {
                    context.Detach(r);
                }
            }
        }

        public void SaveChanges() 
        {
            this.context.SaveChanges();
        }";

        // 0 = namespace, 1 = ctxName
        private const string CRM_REPOSITORY_IMPL = @"   public class CrmRepository<T> : Kipon.Xrm.IRepository<T> where T: Microsoft.Xrm.Sdk.Entity, new() 
    {{
        private {1} context;

        public CrmRepository({1} context)
        {{
            this.context = context;
        }}

        public IQueryable<T> GetQuery()
        {{
            return context.CreateQuery<T>();
        }}

        public void Delete(T entity)
        {{
            this.context.DeleteObject(entity);
        }}

        public void Add(T entity)
        {{
            this.context.AddObject(entity);
        }}

        public void Attach(T entity)
        {{
            this.context.Attach(entity);
        }}

        public void Detach(T entity)
        {{
            this.context.Detach(entity);
        }}

        public void Update(T entity)
        {{
            if (!this.context.IsAttached(entity))
            {{
                this.context.Attach(entity);
            }}

            this.context.UpdateObject(entity);
        }}

        public T GetById(Guid id)
        {{
            return (from q in this.GetQuery()
                    where q.Id == id
                    select q).Single();
        }}
    }}";

        #endregion

        public const string version = "1.0.0";
        void ICustomizeCodeDomService.CustomizeCodeDom(CodeCompileUnit codeUnit, IServiceProvider services)
        {
            var ns = (from c in Environment.GetCommandLineArgs() where c.StartsWith("/namespace:") select c.Split(':')[1]).Single();
            var xrmNS = "Kipon.Xrm";

            var ctxName = (from c in Environment.GetCommandLineArgs() where c.StartsWith("/ServiceContextName") select c.Split(':')[1]).Single();

            var entities = CodeWriterFilter.ENTITIES;
            using (var writer = new System.IO.StreamWriter("CrmUnitOfWork.Design.cs", false))
            {
                writer.WriteLine($"// Version: {version}, Dynamics 365 svcutil solid extension tool by Kipon ApS (c) 2019, Kjeld Poulsen");
                writer.WriteLine("// This file is autogenerated. Do not touch the code manually.");
                writer.WriteLine("");
                writer.WriteLine("using System;");
                writer.WriteLine("using System.Linq;");
                writer.WriteLine("using Microsoft.Xrm.Sdk;");
                writer.WriteLine("namespace " + ns);
                /* NS */ writer.WriteLine("{");


                #region unitOfWork work print methods
                void printConstructor(string name)
                {
                    writer.WriteLine($"\t\tprivate {ctxName} context;");
                    writer.WriteLine("\t\tprivate IOrganizationService _service;");

                    /*    */ writer.WriteLine($"\t\tpublic {name}(IOrganizationService orgService)");
                    /* CO */ writer.WriteLine("\t\t{");
                    /*    */ writer.WriteLine($"\t\t\tthis._service = orgService;");
                    /*    */ writer.WriteLine($"\t\t\tthis.context = new {ctxName}(_service);");
                    /* CO */ writer.WriteLine("\t\t}");
                }

                void printGenericAndRepositories()
                {
                    writer.WriteLine("");
                    writer.WriteLine(CRM_UNIT_OF_WORK_GENERIC);
                    writer.WriteLine("");

                    foreach (var logicalname in entities.Keys)
                    {
                        var uowname = entities[logicalname];
                        writer.WriteLine($"\t\tprivate {xrmNS}.IRepository<" + logicalname + "> _" + uowname.ToLower() + "; ");
                        writer.WriteLine($"\t\tpublic {xrmNS}.IRepository<" + logicalname + "> " + uowname);
                        /* R1 */ writer.WriteLine("\t\t{");
                        /*    */ writer.WriteLine("\t\t\tget");
                        /* R2 */ writer.WriteLine("\t\t\t{");
                        /*    */ writer.WriteLine("\t\t\t\tif (_" + uowname.ToLower() + " == null)");
                        /* R3 */ writer.WriteLine("\t\t\t\t\t{");
                        /*    */ writer.WriteLine("\t\t\t\t\t\t_" + uowname.ToLower() + " = new CrmRepository<" + logicalname + ">(this.context);");
                        /* R3 */ writer.WriteLine("\t\t\t\t\t}");
                        /*    */ writer.WriteLine("\t\t\t\treturn _" + uowname.ToLower() + ";");
                        /* R2 */ writer.WriteLine("\t\t\t}");
                        /* R1 */ writer.WriteLine("\t\t}");
                    }
                }
                #endregion

                #region generate crmunitofwork
                writer.WriteLine("\t[Kipon.Xrm.Attributes.Export(typeof(IUnitOfWork))]");
                writer.WriteLine("\t[Kipon.Xrm.Attributes.Export(typeof(Kipon.Xrm.IUnitOfWork))]");
                writer.WriteLine("\tpublic sealed partial class CrmUnitOfWork: IUnitOfWork, IDisposable");
                /* UOW */ writer.WriteLine("\t{");
                printConstructor("CrmUnitOfWork");
                printGenericAndRepositories();
                /* UOW */ writer.WriteLine("\t}");
                #endregion

                #region generate admin unit of work
                writer.WriteLine("\t[Kipon.Xrm.Attributes.Export(typeof(IAdminUnitOfWork))]");
                writer.WriteLine("\t[Kipon.Xrm.Attributes.Export(typeof(Kipon.Xrm.IAdminUnitOfWork))]");
                writer.WriteLine("\tpublic sealed partial class AdminCrmUnitOfWork : IAdminUnitOfWork, IDisposable");
                /* UOW */ writer.WriteLine("\t{");
                printConstructor("AdminCrmUnitOfWork");
                printGenericAndRepositories();
                /* UOW */
                writer.WriteLine("\t}");

                #endregion

                #region genrate based entity interfaces for target, preimage, postimage and mergedimage
                foreach (var logicalname in entities.Keys)
                {
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Target : {xrmNS}.Target<{logicalname}>"+"{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Preimage : {xrmNS}.Preimage<{logicalname}>" + "{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Postimage : {xrmNS}.Postimage<{logicalname}>" + "{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Mergedimage : {xrmNS}.Mergedimage<{logicalname}>" + "{ }");

                    writer.WriteLine($"\tpublic partial class {logicalname} :");
                    writer.WriteLine($"\t\tI{logicalname}Target,");
                    writer.WriteLine($"\t\tI{logicalname}Preimage,");
                    writer.WriteLine($"\t\tI{logicalname}Postimage,");
                    writer.WriteLine($"\t\tI{logicalname}Mergedimage");
                    /* C */ writer.WriteLine("\t{");
                    /* C */ writer.WriteLine("\t}");
                }
                #endregion

                #region generate target references for steps that takes a target, ex. Delete, Set status etc.
                foreach (var logicalname in entities.Keys)
                {
                    /*   */ writer.WriteLine($"\tpublic sealed class {logicalname}Reference : {xrmNS}.TargetReference<{logicalname}>");
                    /* C */ writer.WriteLine("\t{");
                    /*   */ writer.WriteLine($"\t\tpublic {logicalname}Reference(EntityReference target): base(target)" + "{ }");
                    /*   */ writer.WriteLine($"\t\tprotected sealed override string _logicalName => {logicalname}.EntityLogicalName;");
                    /* C */ writer.WriteLine("\t}");
                }
                #endregion

                #region generate IUnitOfWork interface
                writer.WriteLine("\tpublic partial interface IUnitOfWork : Kipon.Xrm.IUnitOfWork");
                writer.WriteLine("\t{");
                writer.WriteLine("\t\t#region entity repositories");
                foreach (var logicalname in entities.Keys)
                {
                    var uowname = entities[logicalname];
                    writer.WriteLine("\t\tKipon.Xrm.IRepository<" + logicalname + "> " + uowname + " { get; }");
                }
                writer.WriteLine("\t\t#endregion");
                writer.WriteLine("\t}");
                #endregion

                #region admin unitof work
                writer.WriteLine("\tpublic partial interface IAdminUnitOfWork : Kipon.Xrm.IAdminUnitOfWork, IUnitOfWork { }");
                #endregion

                #region CRMRepository Impl
                writer.WriteLine(string.Format(CRM_REPOSITORY_IMPL, ns, ctxName));
                #endregion

                /* NS */
                writer.WriteLine("}");

                #region xrm extension methods
                /*    */ writer.WriteLine("namespace Kipon.Xrm.Extensions.Sdk");
                /* NS */ writer.WriteLine("{");
                /*    */ writer.WriteLine("\tpublic static partial class KiponSdkGeneratedExtensionMethods");
                /* CL */ writer.WriteLine("\t{");
                /*    */ writer.WriteLine("\t\tstatic KiponSdkGeneratedExtensionMethods()");
                /* SC */ writer.WriteLine("\t\t{");
                foreach (var logicalname in entities.Keys)
                {
                    writer.WriteLine($"\t\t\tentittypes[{ns}.{logicalname}.EntityLogicalName] = typeof({ns}.{logicalname});");
                }
                /* SC */ writer.WriteLine("\t\t}");
                /* CL */ writer.WriteLine("\t}");
                /* NS */ writer.WriteLine("}");
                #endregion
            }
        }
    }

    public static class LocalExtensions
    {
        public static string ReplaceLastElement(this string value, char delimiter, string replaceWith)
        {
            var values = value.Split(delimiter).ToList();
            values = values.Take(values.Count - 1).ToList();
            values.Add(replaceWith);
            return string.Join(delimiter.ToString(), values);

        }
    }
}
