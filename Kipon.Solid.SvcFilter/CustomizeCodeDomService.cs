using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Crm.Services.Utility;
using Microsoft.Xrm.Sdk.Metadata;


namespace Kipon.Solid.SvcFilter
{
    public class CustomizeCodeDomService : ICustomizeCodeDomService
    {
        public const string version = "1.0.0";
        void ICustomizeCodeDomService.CustomizeCodeDom(CodeCompileUnit codeUnit, IServiceProvider services)
        {
            var ns = (from c in Environment.GetCommandLineArgs() where c.StartsWith("/namespace:") select c.Split(':')[1]).Single();

            var entities = CodeWriterFilter.ENTITIES;
            using (var writer = new System.IO.StreamWriter("CrmUnitOfWork.Design.cs", false))
            {
                writer.WriteLine($"// Version: {version}, Dynamics 365 svcutil solid extension tool by Kipon ApS, Kjeld Poulsen");
                writer.WriteLine("// This file is autogenerated. Do not touch the code manually.");
                writer.WriteLine("");
                writer.WriteLine("namespace " + ns);
                writer.WriteLine("{");
                writer.WriteLine("\tpublic partial class CrmUnitOfWork");
                writer.WriteLine("\t{");
                foreach (var logicalname in entities.Keys)
                {
                    var uowname = entities[logicalname];
                    writer.WriteLine("\t\tprivate IRepository<" + logicalname + "> _" + uowname.ToLower() + "; ");
                    writer.WriteLine("\t\tpublic IRepository<" + logicalname + "> " + uowname);
                    writer.WriteLine("\t\t{");
                    writer.WriteLine("\t\t\tget");
                    writer.WriteLine("\t\t\t{");
                    writer.WriteLine("\t\t\t\tif (_" + uowname.ToLower() + " == null)");
                    writer.WriteLine("\t\t\t\t\t{");
                    writer.WriteLine("\t\t\t\t\t\t_" + uowname.ToLower() + " = new CrmRepository<" + logicalname + ">(this.context);");
                    writer.WriteLine("\t\t\t\t\t}");
                    writer.WriteLine("\t\t\t\treturn _" + uowname.ToLower() + ";");
                    writer.WriteLine("\t\t\t}");
                    writer.WriteLine("\t\t}");
                }
                writer.WriteLine("\t}");

                var xrmNS = ns.ReplaceLastElement('.', "Xrm");

                foreach (var logicalname in entities.Keys)
                {
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Target : {xrmNS}.Target<{logicalname}>"+"{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Preimage : {xrmNS}.Preimage<{logicalname}>" + "{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Postimage : {xrmNS}.Postimage<{logicalname}>" + "{ }");
                    writer.WriteLine($"\tpublic partial interface I{logicalname}Mergedimage : {xrmNS}.Mergedimage<{logicalname}>" + "{ }");

                    writer.WriteLine($"\tpublic partial class {logicalname} :");
                    writer.WriteLine($"\t\tI{logicalname}Target,");
                    writer.WriteLine($"\t\tI{logicalname}Preimage,");
                    writer.WriteLine($"\t\tI{logicalname}Postimage,");
                    writer.WriteLine($"\t\t{logicalname}Mergedimage");
                    writer.WriteLine("\t{");
                    writer.WriteLine("\t}");
                }
                writer.WriteLine("}");
            }

            using (var writer = new System.IO.StreamWriter("IUnitOfWork.Design.cs", false))
            {
                writer.WriteLine($"// Version: {version}, Dynamics 365 svcutil solid extension tool by Kipon ApS, Kjeld Poulsen");
                writer.WriteLine("// This file is autogenerated. Do not touch the code manually");
                writer.WriteLine("");
                writer.WriteLine("namespace " + ns);
                writer.WriteLine("{");
                writer.WriteLine("\tpublic partial interface IUnitOfWork");
                writer.WriteLine("\t{");
                writer.WriteLine("\t\t#region entity repositories");
                foreach (var logicalname in entities.Keys)
                {
                    var uowname = entities[logicalname];
                    writer.WriteLine("\t\tIRepository<" + logicalname + "> " + uowname + " { get; }");
                }
                writer.WriteLine("\t\t#endregion");
                writer.WriteLine("\t}");
                writer.WriteLine("}");
            }
        }
    }

    public static class LocalExtensions
    {
        public static string ReplaceLastElement(this string value, char delimiter, string replaceWith)
        {
            var values = value.Split(delimiter).ToList();
            values = values.Take(value.Length - 1).ToList();
            values.Add(replaceWith);
            return string.Join(delimiter.ToString(), values);

        }
    }
}
