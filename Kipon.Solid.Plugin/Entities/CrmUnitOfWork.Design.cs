// Version: 1.0.0, Dynamics 365 svcutil solid extension tool by Kipon ApS (c) 2019, Kjeld Poulsen
// This file is autogenerated. Do not touch the code manually.

using System;
using System.Linq;
using Microsoft.Xrm.Sdk;
namespace Kipon.Solid.Plugin.Entities
{
	public partial class CrmUnitOfWork: IUnitOfWork, IDisposable
	{
		private SolidContextService context;
		private IOrganizationService _service;
		public CrmUnitOfWork(IOrganizationService orgService)
		{
			this._service = orgService;
			this.context = new SolidContextService(_service);
		}

        public void Dispose()
        {
            context.Dispose();
        }

        public R ExecuteRequest<R>(OrganizationRequest request) where R : OrganizationResponse
        {
            return (R)this.context.Execute(request);
        }

        public OrganizationResponse Execute(OrganizationRequest request)
        {
            return this.context.Execute(request);
        }


        public Guid Create(Entity entity)
        {
            return this._service.Create(entity);
        }

        public void Update(Entity entity)
        {
            this._service.Update(entity);
        }

        public void Delete(Entity entity)
        {
            this._service.Delete(entity.LogicalName, entity.Id);
        }
        public void ClearChanges()
        {
            this.context.ClearChanges();
        }

        public void Detach(string logicalName, Guid? id)
        {
            if (this.context != null)
            {
                var candidates = (from c in this.context.GetAttachedEntities() where c.LogicalName == logicalName select c);
                if (id != null)
                {
                    candidates = (from c in candidates where c.Id == id.Value select c);
                }
                foreach (var r in candidates.ToArray())
                {
                    context.Detach(r);
                }
            }
        }

        public void SaveChanges() 
        {
            this.context.SaveChanges();
        }

		private Xrm.IRepository<Account> _accounts; 
		public Xrm.IRepository<Account> Accounts
		{
			get
			{
				if (_accounts == null)
					{
						_accounts = new CrmRepository<Account>(this.context);
					}
				return _accounts;
			}
		}
		private Xrm.IRepository<Contact> _contacts; 
		public Xrm.IRepository<Contact> Contacts
		{
			get
			{
				if (_contacts == null)
					{
						_contacts = new CrmRepository<Contact>(this.context);
					}
				return _contacts;
			}
		}
		private Xrm.IRepository<Opportunity> _opportunities; 
		public Xrm.IRepository<Opportunity> Opportunities
		{
			get
			{
				if (_opportunities == null)
					{
						_opportunities = new CrmRepository<Opportunity>(this.context);
					}
				return _opportunities;
			}
		}
		private Xrm.IRepository<SalesOrder> _salesorders; 
		public Xrm.IRepository<SalesOrder> Salesorders
		{
			get
			{
				if (_salesorders == null)
					{
						_salesorders = new CrmRepository<SalesOrder>(this.context);
					}
				return _salesorders;
			}
		}
		private Xrm.IRepository<Quote> _quotes; 
		public Xrm.IRepository<Quote> Quotes
		{
			get
			{
				if (_quotes == null)
					{
						_quotes = new CrmRepository<Quote>(this.context);
					}
				return _quotes;
			}
		}
		private Xrm.IRepository<SystemUser> _systemusers; 
		public Xrm.IRepository<SystemUser> Systemusers
		{
			get
			{
				if (_systemusers == null)
					{
						_systemusers = new CrmRepository<SystemUser>(this.context);
					}
				return _systemusers;
			}
		}
	}
	public partial interface IAccountTarget : Kipon.Solid.Plugin.Xrm.Target<Account>{ }
	public partial interface IAccountPreimage : Kipon.Solid.Plugin.Xrm.Preimage<Account>{ }
	public partial interface IAccountPostimage : Kipon.Solid.Plugin.Xrm.Postimage<Account>{ }
	public partial interface IAccountMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<Account>{ }
	public partial class Account :
		IAccountTarget,
		IAccountPreimage,
		IAccountPostimage,
		IAccountMergedimage
	{
	}
	public partial interface IContactTarget : Kipon.Solid.Plugin.Xrm.Target<Contact>{ }
	public partial interface IContactPreimage : Kipon.Solid.Plugin.Xrm.Preimage<Contact>{ }
	public partial interface IContactPostimage : Kipon.Solid.Plugin.Xrm.Postimage<Contact>{ }
	public partial interface IContactMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<Contact>{ }
	public partial class Contact :
		IContactTarget,
		IContactPreimage,
		IContactPostimage,
		IContactMergedimage
	{
	}
	public partial interface IOpportunityTarget : Kipon.Solid.Plugin.Xrm.Target<Opportunity>{ }
	public partial interface IOpportunityPreimage : Kipon.Solid.Plugin.Xrm.Preimage<Opportunity>{ }
	public partial interface IOpportunityPostimage : Kipon.Solid.Plugin.Xrm.Postimage<Opportunity>{ }
	public partial interface IOpportunityMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<Opportunity>{ }
	public partial class Opportunity :
		IOpportunityTarget,
		IOpportunityPreimage,
		IOpportunityPostimage,
		IOpportunityMergedimage
	{
	}
	public partial interface ISalesOrderTarget : Kipon.Solid.Plugin.Xrm.Target<SalesOrder>{ }
	public partial interface ISalesOrderPreimage : Kipon.Solid.Plugin.Xrm.Preimage<SalesOrder>{ }
	public partial interface ISalesOrderPostimage : Kipon.Solid.Plugin.Xrm.Postimage<SalesOrder>{ }
	public partial interface ISalesOrderMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<SalesOrder>{ }
	public partial class SalesOrder :
		ISalesOrderTarget,
		ISalesOrderPreimage,
		ISalesOrderPostimage,
		ISalesOrderMergedimage
	{
	}
	public partial interface IQuoteTarget : Kipon.Solid.Plugin.Xrm.Target<Quote>{ }
	public partial interface IQuotePreimage : Kipon.Solid.Plugin.Xrm.Preimage<Quote>{ }
	public partial interface IQuotePostimage : Kipon.Solid.Plugin.Xrm.Postimage<Quote>{ }
	public partial interface IQuoteMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<Quote>{ }
	public partial class Quote :
		IQuoteTarget,
		IQuotePreimage,
		IQuotePostimage,
		IQuoteMergedimage
	{
	}
	public partial interface ISystemUserTarget : Kipon.Solid.Plugin.Xrm.Target<SystemUser>{ }
	public partial interface ISystemUserPreimage : Kipon.Solid.Plugin.Xrm.Preimage<SystemUser>{ }
	public partial interface ISystemUserPostimage : Kipon.Solid.Plugin.Xrm.Postimage<SystemUser>{ }
	public partial interface ISystemUserMergedimage : Kipon.Solid.Plugin.Xrm.Mergedimage<SystemUser>{ }
	public partial class SystemUser :
		ISystemUserTarget,
		ISystemUserPreimage,
		ISystemUserPostimage,
		ISystemUserMergedimage
	{
	}
	public sealed class AccountReference : Kipon.Solid.Plugin.Xrm.TargetReference<Account>
	{
		public AccountReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Account.EntityLogicalName;
	}
	public sealed class ContactReference : Kipon.Solid.Plugin.Xrm.TargetReference<Contact>
	{
		public ContactReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Contact.EntityLogicalName;
	}
	public sealed class OpportunityReference : Kipon.Solid.Plugin.Xrm.TargetReference<Opportunity>
	{
		public OpportunityReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Opportunity.EntityLogicalName;
	}
	public sealed class SalesOrderReference : Kipon.Solid.Plugin.Xrm.TargetReference<SalesOrder>
	{
		public SalesOrderReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => SalesOrder.EntityLogicalName;
	}
	public sealed class QuoteReference : Kipon.Solid.Plugin.Xrm.TargetReference<Quote>
	{
		public QuoteReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Quote.EntityLogicalName;
	}
	public sealed class SystemUserReference : Kipon.Solid.Plugin.Xrm.TargetReference<SystemUser>
	{
		public SystemUserReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => SystemUser.EntityLogicalName;
	}
	public partial interface IUnitOfWork
	{
        R ExecuteRequest<R>(OrganizationRequest request) where R : OrganizationResponse;
        OrganizationResponse Execute(OrganizationRequest request);

        System.Guid Create(Entity entity);
        void Update(Entity entity);
        void Delete(Entity entity);
        void SaveChanges();
        void ClearChanges();
        void Detach(string logicalname, Guid? id);
		#region entity repositories
		Xrm.IRepository<Account> Accounts { get; }
		Xrm.IRepository<Contact> Contacts { get; }
		Xrm.IRepository<Opportunity> Opportunities { get; }
		Xrm.IRepository<SalesOrder> Salesorders { get; }
		Xrm.IRepository<Quote> Quotes { get; }
		Xrm.IRepository<SystemUser> Systemusers { get; }
		#endregion
	}
   public class CrmRepository<T> : Xrm.IRepository<T> where T: Microsoft.Xrm.Sdk.Entity, new() 
    {
        private SolidContextService context;

        public CrmRepository(SolidContextService context)
        {
            this.context = context;
        }

        public IQueryable<T> GetQuery()
        {
            return context.CreateQuery<T>();
        }

        public void Delete(T entity)
        {
            this.context.DeleteObject(entity);
        }

        public void Add(T entity)
        {
            this.context.AddObject(entity);
        }

        public void Attach(T entity)
        {
            this.context.Attach(entity);
        }

        public void Detach(T entity)
        {
            this.context.Detach(entity);
        }

        public void Update(T entity)
        {
            if (!this.context.IsAttached(entity))
            {
                this.context.Attach(entity);
            }

            this.context.UpdateObject(entity);
        }

        public T GetById(Guid id)
        {
            return (from q in this.GetQuery()
                    where q.Id == id
                    select q).Single();
        }
    }
}
